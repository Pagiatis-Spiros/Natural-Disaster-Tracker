{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/CounterInfo.js","components/Map.js","components/loader.gif","components/Loader.js","components/DownloadButton.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","volmarker","wildmarker","stormmarker","icebergmarker","isVolcano","isWildfire","isStorm","isIceberg","onClick","lat","lng","icon","className","wildfire","hFlip","LocationInfoBox","info","id","title","CounterInfo","volcanoes","wildfires","storms","icebergs","style","color","Map","selected","eventData","center","zoom","useState","locationInfo","setLocationInfo","Vol","Wild","Storm","Iceberg","forEach","elem","value","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","generateCSVData","arr_infoTableData","tmpEntries","i","length","push","date","getCSVinfo","arrayContent","str_csvContent","arr","str_dataString","join","getCSVFileName","dt","Date","getDate","getMonth","getFullYear","DownloadButton","filename","separator","data","asyncOnClick","Header","options","label","App","setEventData","loading","setLoading","setSelected","useEffect","fetchEvents","a","fetch","res","json","events","onChange","labelledBy","shouldToggleOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.119e7fbc.chunk.js","sourcesContent":["import { Icon } from \"@iconify/react\";\nimport wildfire from \"@iconify/icons-mdi/fire-alert\";\n\nconst LocationMarker = ({\n  isVolcano = 0,\n  isWildfire = 0,\n  isStorm = 0,\n  isIceberg = 0,\n  lat,\n  lng,\n  onClick,\n}) => {\n  let volmarker;\n  let wildmarker;\n  let stormmarker;\n  let icebergmarker;\n\n  if (isVolcano) {\n    volmarker = <Icon icon=\"emojione:volcano\" className=\"location-icon\" />;\n  }\n  if (isWildfire) {\n    wildmarker = <Icon icon={wildfire} className=\"location-icon\" />;\n  }\n  if (isStorm) {\n    stormmarker = (\n      <Icon\n        icon=\"carbon:thunderstorm-severe\"\n        hFlip={true}\n        className=\"location-icon\"\n      />\n    );\n  }\n  if (isIceberg) {\n    icebergmarker = <Icon icon=\"openmoji:iceberg\" className=\"location-icon\" />;\n  }\n\n  return (\n    <div className=\"location-marker\" onClick={onClick}>\n      {volmarker}\n      {wildmarker}\n      {stormmarker}\n      {icebergmarker}\n    </div>\n  );\n};\n\nexport default LocationMarker;\n","const LocationInfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n                <li>Type: { info.id }</li>\n                <li>Name: { info.title }</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","const CounterInfo = ({ volcanoes, wildfires, storms, icebergs }) => {\n  return (\n    <div className=\"counter-info\">\n      <ul>\n        <li>\n          Volcanoes : <strong style={{ color: \"red\" }}>{volcanoes}</strong>\n        </li>\n        <li>\n          Wildfires : <strong style={{ color: \"red\" }}>{wildfires}</strong>\n        </li>\n        <li>\n          Storms : <strong style={{ color: \"red\" }}>{storms}</strong>\n        </li>\n        <li>\n          IceBergs : <strong style={{ color: \"red\" }}>{icebergs}</strong>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default CounterInfo;\n","import GoogleMapReact from \"google-map-react\";\nimport LocationMarker from \"./LocationMarker\";\nimport LocationInfoBox from \"./LocationInfoBox\";\nimport CounterInfo from \"./CounterInfo\";\nimport { useState } from \"react\";\n\nconst Map = ({ selected, eventData, center, zoom }) => {\n  const [locationInfo, setLocationInfo] = useState(null);\n  let volcanoes = 0;\n  let wildfires = 0;\n  let storms = 0;\n  let icebergs = 0;\n  let Vol = 0;\n  let Wild = 0;\n  let Storm = 0;\n  let Iceberg = 0;\n  const checker = () => {\n    selected.forEach((elem) => {\n      if (elem.value === \"V\") {\n        Vol = 1;\n      } else if (elem.value === \"W\") {\n        Wild = 1;\n      } else if (elem.value === \"S\") {\n        Storm = 1;\n      } else if (elem.value === \"I\") {\n        Iceberg = 1;\n      }\n    });\n  };\n  checker();\n  const markers = eventData.map((ev) => {\n    if (ev.categories[0].id === 8) {\n      wildfires += 1;\n      return (\n        <LocationMarker\n          isWildfire={Wild}\n          lat={ev.geometries[0].coordinates[1]}\n          lng={ev.geometries[0].coordinates[0]}\n          onClick={() => {\n            setLocationInfo({ id: ev.categories[0].title, title: ev.title });\n          }}\n        />\n      );\n    } else if (ev.categories[0].id === 12) {\n      volcanoes += 1;\n      return (\n        <LocationMarker\n          isVolcano={Vol}\n          lat={ev.geometries[0].coordinates[1]}\n          lng={ev.geometries[0].coordinates[0]}\n          onClick={() => {\n            setLocationInfo({ id: ev.categories[0].title, title: ev.title });\n          }}\n        />\n      );\n    } else if (ev.categories[0].id === 10) {\n      storms += 1;\n      return (\n        <LocationMarker\n          isStorm={Storm}\n          lat={ev.geometries[0].coordinates[1]}\n          lng={ev.geometries[0].coordinates[0]}\n          onClick={() => {\n            setLocationInfo({ id: ev.categories[0].title, title: ev.title });\n          }}\n        />\n      );\n    } else if (ev.categories[0].id === 15) {\n        icebergs += 1;\n        return (\n          <LocationMarker\n            isIceberg={Iceberg}\n            lat={ev.geometries[0].coordinates[1]}\n            lng={ev.geometries[0].coordinates[0]}\n            onClick={() => {\n              setLocationInfo({ id: ev.categories[0].title, title: ev.title });\n            }}\n          />\n        );\n      }\n\n    return null;\n  });\n\n  return (\n    <div>\n      <div className=\"map\">\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyBdBvxU8-2HtDvYhPDUS2jyP5x9Ze2f5hw\" }}\n          defaultCenter={center}\n          defaultZoom={zoom}\n          border-color={\"black\"}\n        >\n          {markers}\n        </GoogleMapReact>\n      </div>\n      {locationInfo && <LocationInfoBox info={locationInfo} />}\n      {<CounterInfo volcanoes={volcanoes} wildfires={wildfires} storms={storms} icebergs={icebergs}/>}\n    </div>\n  );\n};\n\nMap.defaultProps = {\n  center: {\n    lat: 42.3265,\n    lng: -122.8756,\n  },\n  zoom: 1,\n};\n\nexport default Map;\n","export default __webpack_public_path__ + \"static/media/loader.fe6d9081.gif\";","import spinner from './loader.gif'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={spinner} alt=\"Loading\" />\n            <h1>Fetching Data</h1>\n        </div>\n    )\n}\n\nexport default Loader;\n","import { CSVLink } from \"react-csv\";\nimport { ImDownload2 } from 'react-icons/im';\nconst getCSVinfo = (eventData) => {\n  let tmpEntries = [];\n  for (let i = 0; i < eventData.length; ++i) {\n      tmpEntries.push([\n        `${eventData[i].categories[0].title}`,\n        `${eventData[i].id}`,\n        `${eventData[i].title}`,\n        `${eventData[i].geometries[0].date}`,\n        `${eventData[i].geometries[0].coordinates[0]}`,\n        `${eventData[i].geometries[0].coordinates[1]}`,\n      ]);\n    \n  }\n  return tmpEntries;\n};\n\nconst generateCSVData = (eventData) => {\n  const arr_columns = [\n    \"Event Type\",\n    \"Event ID\",\n    \"Event Name\",\n    \"Event Date\",\n    \"Longitude\",\n    \"Latitude\",\n  ];\n  const arr_infoTableData = getCSVinfo(eventData);\n  const arrayContent = [arr_columns, ...arr_infoTableData];\n  let str_csvContent = \"sep=!\\n\";\n\n  arrayContent.forEach((arr) => {\n    const str_dataString = arr.join(\"!\");\n    str_csvContent += str_dataString + \"\\n\";\n  });\n  return str_csvContent;\n};\n\nconst getCSVFileName = () => {\n  let dt = new Date();\n  return `Disasters_Info_${dt.getDate()}_${dt.getMonth()}_${dt.getFullYear()}.csv`;\n};\n\nconst DownloadButton = ({ eventData }) => {\n  return (\n    <div className=\"download-button\">\n        <CSVLink\n          filename={getCSVFileName()}\n          separator={\"!\"}\n          data={generateCSVData(eventData)}\n          asyncOnClick={true}\n        >\n        <h1 > \n         <ImDownload2 />\n         </h1>\n        </CSVLink>\n    </div>\n  );\n};\n\nexport default DownloadButton;\n","import DownloadButton from \"./DownloadButton\"\n\nconst Header = ({ eventData }) => {\n    return (\n        <header className=\"header\">\n            <h1> Natural Disaster Tracker </h1>\n            <DownloadButton eventData={eventData}/>\n        </header>\n    )\n}\n\nexport default Header\n","import Map from \"./components/Map\";\nimport Loader from \"./components/Loader\";\nimport Header from \"./components/Header\";\n\nimport { useState, useEffect } from \"react\";\nimport { MultiSelect } from \"react-multi-select-component\";\nconst options = [\n  { label: \"WildFires 🔥\", value: \"W\" },\n  { label: \"Volcanoes 🌋\", value: \"V\" },\n  { label: \"Storm ⛈️\", value: \"S\" },\n  { label: \"IceBerg 🧊\", value: \"I\" },\n];\n\nfunction App() {\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selected, setSelected] = useState([]);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch(\"https://eonet.gsfc.nasa.gov/api/v2.1/events\");\n      const { events } = await res.json();\n\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchEvents();\n\n  }, []);\n\n  return (\n    <div>\n      <div>\n      <Header eventData={eventData}/>\n      \n      </div>\n      <div className=\"selection-menu\">\n        <h1>Select Disaster</h1>\n        <MultiSelect\n          options={options}\n          value={selected}\n          onChange={setSelected}\n          labelledBy=\"Select\"\n          shouldToggleOnHover={true}\n        />     \n      </div>\n      \n      {!loading ? (\n        <Map selected={selected} eventData={eventData} />\n      ) : (\n        <Loader />\n      )}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}